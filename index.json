[{"content":"linux_networking Esta es una recopilaci√≥n de los comandos y su ejecuci√≥n basado en el libro THE GORILLA GUIDE TO LINUX NETWORKING 101\nChapter 2 ‚ùØ ssh cumulus@192.168.1.107 cumulus@192.168.1.107\u0026#39;s password: ******** Welcome to Cumulus VX (TM) Cumulus VX (TM) is a community supported virtual appliance designed for experiencing, testing, and prototyping Cumulus Networks\u0026#39; latest technology. For any questions or technical support, visit our community site at: http://community.cumulusnetworks.com The registered trademark Linux ¬Æ is used pursuant to a sublicense from LMI, the exclusive licensee of ‚ùØ uname -a Linux e-pc 5.15.0-124-generic #134~20.04.1-Ubuntu SMP Tue Oct 1 15:27:33 UTC 2024 x86_64 x86_64 x86_64 GNU/Linux Show the type of operating system\n‚ùØ uname -a Linux e-pc 5.15.0-124-generic #134~20.04.1-Ubuntu SMP Tue Oct 1 15:27:33 UTC 2024 x86_64 x86_64 x86_64 GNU/Linux Show host info and other data\n‚ùØ hostnamectl Static hostname: e-pc Icon name: computer-laptop Chassis: laptop üíª Machine ID: 34a383e3a4c9492584d9b5fee7932a04 Boot ID: be0e8ac233fa4734b7721b398d184026 Operating System: Ubuntu 20.04.6 LTS OS Support End: - OS Support Expired: 54y 9month 4w Kernel: Linux 5.15.0-124-generic Architecture: x86-64 Print working directory\n‚ùØ pwd /home/erick List files that are present in the folder\n‚ùØ ls \u0026#39;2022-12-19 15-36-29.mkv\u0026#39; \u0026#39;2023-03-06 14-03-44.mkv\u0026#39; \u0026#39;2023-03-23 14-05-14.mkv\u0026#39; \u0026#39;2024-04-15 14-35-45.mkv\u0026#39; binaries_installs/ Downloads/ proyects/ \u0026#39;2022-12-20 15-34-27.mkv\u0026#39; \u0026#39;2023-03-07 14-01-59.mkv\u0026#39; \u0026#39;2023-04-03 14-03-15.mkv\u0026#39; \u0026#39;2024-04-15 14-38-27.mkv\u0026#39; blog/ examenTecuan/ Public/ \u0026#39;2023-01-02 18-39-41.mkv\u0026#39; \u0026#39;2023-03-07 16-01-11.mkv\u0026#39; \u0026#39;2023-04-19 17-37-25.mkv\u0026#39; \u0026#39;2024-04-15 14-39-07.mkv\u0026#39; CLionProjects/ ExpanDrive/ SmartBear/ \u0026#39;2023-02-13 14-25-11.mkv\u0026#39; \u0026#39;2023-03-07 16-08-41.mkv\u0026#39; \u0026#39;2023-11-01 22-27-37.mkv\u0026#39; \u0026#39;2024-04-15 14-43-40.mp4\u0026#39; code/ Firefox_wallpaper.png snap/ \u0026#39;2023-02-14 14-23-23.mkv\u0026#39; \u0026#39;2023-03-07 16-10-51.mkv\u0026#39; \u0026#39;2023-11-07 09-52-49.mkv\u0026#39; \u0026#39;2024-04-15 14-44-26.mp4\u0026#39; conf_vim.md geb_scrip.groovy Templates/ \u0026#39;2023-02-14 14-34-04.mkv\u0026#39; \u0026#39;2023-03-07 16-11-40.mkv\u0026#39; \u0026#39;2023-11-08 09-45-05.mkv\u0026#39; \u0026#39;2024-04-20 06-36-22.mp4\u0026#39; cultivos.mp4 IdeaProjects/ tmp/ \u0026#39;2023-02-16 14-09-09.mkv\u0026#39; \u0026#39;2023-03-07 16-14-50.mkv\u0026#39; \u0026#39;2023-11-17 12-06-38.mkv\u0026#39; \u0026#39;2024-04-20 06-37-49.mp4\u0026#39; cultivos.osp IdeaSnapshots/ uni/ \u0026#39;2023-02-20 13-59-04.mkv\u0026#39; \u0026#39;2023-03-07 16-14-52.mkv\u0026#39; \u0026#39;2023-11-17 18-06-01.mkv\u0026#39; \u0026#39;2024-04-30 12-40-12.mp4\u0026#39; cumple logs/ Videos/ \u0026#39;2023-02-27 14-00-50.mkv\u0026#39; \u0026#39;2023-03-07 16-15-57.mkv\u0026#39; \u0026#39;2023-11-21 13-55-35.mkv\u0026#39; \u0026#39;2024-05-08 10-56-58.mp4\u0026#39; default-soapui-workspace.xml Music/ \u0026#39;VirtualBox VMs\u0026#39;/ \u0026#39;2023-02-28 14-02-55.mkv\u0026#39; \u0026#39;2023-03-13 14-03-40.mkv\u0026#39; \u0026#39;2024-04-15 14-33-51.mkv\u0026#39; \u0026#39;2024-06-03 17-33-55.mp4\u0026#39; Desktop/ NetBeansProjects/ vite_grep.log \u0026#39;2023-03-02 14-06-31.mkv\u0026#39; \u0026#39;2023-03-22 14-00-11.mkv\u0026#39; \u0026#39;2024-04-15 14-35-34.mkv\u0026#39; \u0026#39;2024-06-06 09-58-58.mp4\u0026#39; Documents/ Pictures/ zblockChain/ Change directory\n‚ùØ cd /home/erick/.config/ Remove files\n‚ùØ rm aFile Make and remove folders\n‚ùØ mkdir folder ‚ùØ rmdir emptyFolder Executing programs Print path variable\n‚ùØ echo $PATH /home/linuxbrew/.linuxbrew/bin /home/linuxbrew/.linuxbrew/sbin /home/erick/.asdf/shims /home/erick/.asdf/bin /home/erick/uni/webServices/pomm/apache-maven-3.9.9/bin /home/linuxbrew/.linuxbrew/opt/postgresql@11/bin /home/erick/.foundry/bin /home/erick/.sdkman/candidates/java/current/bin /home/erick/.sdkman/candidates/groovy/current/bin /home/erick/.sdkman/candidates/gradle/current/bin /home/erick/.cargo/bin /home/erick/.local/bin /usr/local/sbin /usr/local/bin /usr/sbin /usr/bin /sbin /bin /usr/games /usr/local/games /snap/bin List installed packages\n‚ùØ apt list --installed Listing... accountsservice/focal-updates,focal-security,now 0.6.55-0ubuntu12~20.04.7 amd64 [installed,automatic] acl/focal,now 2.2.53-6 amd64 [installed,automatic] acpi-support/focal,now 0.143 amd64 [installed] acpid/focal,now 1:2.0.32-1ubuntu1 amd64 [installed,automatic] adduser/focal,focal,now 3.118ubuntu2 all [installed,automatic] adwaita-icon-theme-full/focal-updates,focal-updates,now 3.36.1-2ubuntu0.20.04.2 all [installed,automatic] . . . Pipin, direct the outpu of a command to another command\n‚ùØ ls -al | less Installing appplications How do I install applications\n‚ùØ sudo apt update ‚ùØ sudo apt install package_to_install Verify installation\n‚ùØ apt show installed_package Getting help Getting help\n‚ùØ man ls LS(1) User Commands LS(1) NAME ls - list directory contents SYNOPSIS ls [OPTION]... [FILE]... DESCRIPTION List information about the FILEs (the current directory by default). Sort entries alphabetically if none of -cftuvSUX nor --sort is specified. Mandatory arguments to long options are mandatory for short options too. -a, --all do not ignore entries starting with . Linux proceses List running proceses\n‚ùØ ps -ef UID PID PPID C STIME TTY TIME CMD root 1 0 0 18:19 ? 00:00:01 /sbin/init splash root 2 0 0 18:19 ? 00:00:00 [kthreadd] root 3 2 0 18:19 ? 00:00:00 [rcu_gp] root 4 2 0 18:19 ? 00:00:00 [rcu_par_gp] root 5 2 0 18:19 ? 00:00:00 [slub_flushwq] root 6 2 0 18:19 ? 00:00:00 [netns] root 8 2 0 18:19 ? 00:00:00 [kworker/0:0H-events_highpri] Start, stop, or check status of services.\n‚ùØ systemctl status rabbitmq-server ‚óè rabbitmq-server.service - RabbitMQ broker Loaded: loaded (8;;file://e-pc/lib/systemd/system/rabbitmq-server.service^G/lib/systemd/system/rabbitmq-server.service8;;^G; enabled; preset: enabled) Active: active (running) since Wed 2024-10-30 00:20:05 UTC; 46min ago Main PID: 1017 (beam.smp) Tasks: 39 (limit: 18697) Memory: 164.5M CGroup: /system.slice/rabbitmq-server.service ‚îú‚îÄ1017 /usr/lib/erlang/erts-14.2.4/bin/beam.smp -W w -MBas ageffcbf -MHas ageffcbf -MBlmbcs 512 -MHlmbcs 512 -MMmcs 30 -pc unicode -P 1048576 -t 5000000 -stbt db -zdbbl 128000 -s\u0026gt; ‚îú‚îÄ1060 erl_child_setup 32768 ‚îú‚îÄ1454 sh -s disksup ‚îú‚îÄ1460 /usr/lib/erlang/lib/os_mon-2.9.1/priv/bin/memsup ‚îú‚îÄ1461 /usr/lib/erlang/lib/os_mon-2.9.1/priv/bin/cpu_sup ‚îú‚îÄ1496 /usr/lib/erlang/erts-14.2.4/bin/inet_gethost 4 ‚îú‚îÄ1497 /usr/lib/erlang/erts-14.2.4/bin/inet_gethost 4 ‚îî‚îÄ1509 /bin/sh -s rabbit_disk_monitor Oct 30 00:20:03 e-pc rabbitmq-server[1017]: Doc guides: https://www.rabbitmq.com/docs Oct 30 00:20:03 e-pc rabbitmq-server[1017]: Support: https://www.rabbitmq.com/docs/contact Oct 30 00:20:03 e-pc rabbitmq-server[1017]: Tutorials: https://www.rabbitmq.com/tutorials . . . Linux log files View and parse log files Show contents of a file\n‚ùØ cat CNAME erickdjm.xyz View a file with pagination and scrolling\n‚ùØ less CNAME Search for a string in a file\n‚ùØ grep PATTERN [FILE] See the first lines (head end) of a text file\n‚ùØ head View the last lines (tail end ) of a text file. A common use case for tail is to wwatch the status of a log fie in real time with the \u0026ldquo;f\u0026rdquo; flag like:\n‚ùØ tail -f /var/log/syslog Users and super users User with id 1000, and I am the user erick\n‚ùØ id uid=1000(erick) gid=1000(erick) groups=1000(erick),4(adm),24(cdrom),27(sudo),30(dip),46(plugdev),120(lpadmin),132(lxd),133(sambashare),135(docker),136(wireshark),137(vboxusers) ‚ùØ whoami erick ‚ùØ sudo id [sudo] password for erick: uid=0(root) gid=0(root) groups=0(root) ‚ùØ sudo whoami root Files and permissions ‚ùØ ls -l total 36 drwxrwxr-x 2 erick erick 4096 oct 28 19:20 archetypes/ -rw-rw-r-- 1 erick erick 13 oct 28 19:20 CNAME Chapter 3 Understanding Linux Network Interfaces Loopback. The loopback (lo) interface will have an IP address of 127.0.0.1, which represents the host itself\nEthernet. The ethernet 0 (eth0) interface is typically the connection to the local network.\nConfigure network interfaces/devices/links\n‚ùØ ip link 1: lo: \u0026lt;LOOPBACK,UP,LOWER_UP\u0026gt; mtu 65536 qdisc noqueue state UNKNOWN mode DEFAULT group default qlen 1000 link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00 2: wlp0s20f3: \u0026lt;BROADCAST,MULTICAST,UP,LOWER_UP\u0026gt; mtu 1500 qdisc noqueue state UP mode DORMANT group default qlen 1000 link/ether c8:58:c0:c1:86:30 brd ff:ff:ff:ff:ff:ff 3: docker0: \u0026lt;NO-CARRIER,BROADCAST,MULTICAST,UP\u0026gt; mtu 1500 qdisc noqueue state DOWN mode DEFAULT group default link/ether 02:42:9d:02:3e:64 brd ff:ff:ff:ff:ff:ff ip link set [dev] { up | down } ip link set lo mtu 1500\nMAC Addresses Media access control address is the unique identifier assigned to a network interface at layer 2 \u0026ndash; the Data Link Layer \u0026ndash; of the OSI Model.\nIP Addressing They are unique on the same network, every device has at least one, adn addresses typically fall somewhere between 1.1.1.1 and 255.255.255.255\n‚ùØ ip addr 1: lo: \u0026lt;LOOPBACK,UP,LOWER_UP\u0026gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000 link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00 inet 127.0.0.1/8 scope host lo valid_lft forever preferred_lft forever inet6 ::1/128 scope host valid_lft forever preferred_lft forever 2: wlp0s20f3: \u0026lt;BROADCAST,MULTICAST,UP,LOWER_UP\u0026gt; mtu 1500 qdisc noqueue state UP group default qlen 1000 link/ether c8:58:c0:c1:86:30 brd ff:ff:ff:ff:ff:ff inet 192.168.1.101/24 brd 192.168.1.255 scope global dynamic noprefixroute wlp0s20f3 valid_lft 81572sec preferred_lft 81572sec inet6 2806:10a6:13:511b:e122:aa52:72c7:9797/64 scope global temporary dynamic valid_lft 599973sec preferred_lft 81052sec inet6 2806:10a6:13:511b:549a:f3d5:b811:cde1/64 scope global dynamic mngtmpaddr noprefixroute valid_lft 2591975sec preferred_lft 2591975sec inet6 fe80::3713:2ee:2680:726d/64 scope link noprefixroute valid_lft forever preferred_lft forever 3: docker0: \u0026lt;NO-CARRIER,BROADCAST,MULTICAST,UP\u0026gt; mtu 1500 qdisc noqueue state DOWN group default link/ether 02:42:9d:02:3e:64 brd ff:ff:ff:ff:ff:ff inet 172.17.0.1/16 brd 172.17.255.255 scope global docker0 valid_lft forever preferred_lft forever Sends out an Internet Control Message Protocol packet across the network and notifies whether the irs a response. If a host is up and able to communicate on the network an ICMP response will be returned.\n‚ùØ ping -c5 192.168.192.196 PING 192.168.192.196 (192.168.192.196) 56(84) bytes of data. Another common Linux network troubleshooting toolis traceroute. Probes the network between the local system and a destination, gathering information about each IP router in the path. Is useful when you think there may be a network issue.\n‚ùØ traceroute erickdjm.xyz traceroute to erickdjm.xyz (185.199.108.153), 30 hops max, 60 byte packets 1 _gateway (192.168.1.254) 5.209 ms 5.144 ms 5.117 ms 2 dsl-servicio-l200.uninet.net.mx (200.38.193.226) 5.552 ms 5.526 ms 5.508 ms 3 172.16.1.1 (172.16.1.1) 5.487 ms * * 4 bb-la-grand-12-ae44_0.uninet.net.mx (189.246.23.17) 45.113 ms 45.096 ms 45.080 ms DHCP Dynamic host configuration protocol is commonly used for client systems or devices that don\u0026rsquo;t experience any side effects from a periodically changing IP address. On server systems, administrators either manually configure static IP addresses, or they create what are know as static DHCP reservations that are tied to the MAC address of the network adapter.\nHere\u0026rsquo;s how the typical DHCP process works:\nWhen a computer starts up, it sends a DHCP request out on the network. Assuming a DHCP server is present, a DHCP server responds with the IP address configuration for that device. That IP address is marked as reserved so that it‚Äôs not accidentally assigned to some other device. DNS Computers that connect to each other using TCP/IP talk with each other using IP addresses. Domain name system (DNS) is used to map IP addresses to names.\nPerfomrs verbose DNS lookups and is great for toubleshooting DNS issues.\n‚ùØ dig erickdjm.xyz ; \u0026lt;\u0026lt;\u0026gt;\u0026gt; DiG 9.18.28-0ubuntu0.20.04.1-Ubuntu \u0026lt;\u0026lt;\u0026gt;\u0026gt; erickdjm.xyz ;; global options: +cmd ;; Got answer: ;; -\u0026gt;\u0026gt;HEADER\u0026lt;\u0026lt;- opcode: QUERY, status: NOERROR, id: 43318 ;; flags: qr rd ra; QUERY: 1, ANSWER: 4, AUTHORITY: 0, ADDITIONAL: 1 ;; OPT PSEUDOSECTION: ; EDNS: version: 0, flags:; udp: 65494 ;; QUESTION SECTION: ;erickdjm.xyz. IN A ;; ANSWER SECTION: erickdjm.xyz. 1799 IN A 185.199.111.153 erickdjm.xyz. 1799 IN A 185.199.110.153 erickdjm.xyz. 1799 IN A 185.199.109.153 erickdjm.xyz. 1799 IN A 185.199.108.153 ;; Query time: 35 msec ;; SERVER: 127.0.0.53#53(127.0.0.53) (UDP) ;; WHEN: Tue Oct 29 20:14:05 CST 2024 ;; MSG SIZE rcvd: 105 Enumeraates name service switch files, specifically for host entries.\n‚ùØ getent ahosts 127.0.0.1 localhost 127.0.1.1 e-pc 127.0.0.1 ip6-localhost ip6-loopback 127.0.0.1 kubernetes.docker.internal The name server lookup, or nslookup, performs variety of different DNS server lookups: mail server, reverse lookups.\n‚ùØ nslookup \u0026gt; erickdjm.xyz Server: 127.0.0.53 Address: 127.0.0.53#53 Non-authoritative answer: Name: erickdjm.xyz Address: 185.199.109.153 Name: erickdjm.xyz Address: 185.199.110.153 Name: erickdjm.xyz Address: 185.199.108.153 Name: erickdjm.xyz Address: 185.199.111.153 Show what active processes are that have the network interface open.\n‚ùØ netstat Active Internet connections (w/o servers) Proto Recv-Q Send-Q Local Address Foreign Address State tcp 0 0 localhost:xtel localhost:40626 ESTABLISHED tcp 0 0 localhost:xtel localhost:34374 ESTABLISHED tcp 0 0 localhost:40642 localhost:xtel ESTABLISHED tcp 0 0 e-pc:51974 13.89.179.13:https ESTABLISHED tcp 0 0 localhost:34374 localhost:xtel ESTABLISHED tcp 0 0 localhost:40288 localhost:epmd ESTABLISHED tcp 0 0 e-pc:41384 static.73.91.90.1:https ESTABLISHED Chapter 4 Bridging First we are creating a brife named br0 The two ip link set commands add the two Ethernet onterfaces, eth0 and eth1, to the new bridge resulting in a connection between these two interfaces.\n‚ùØ sudo ip link add br0 type bridge ‚ùØ sudo ip link add eth0 master br0 ‚ùØ sudo ip link add eth1 master br0 Show current forwarding database management.\n‚ùØ sudo bridge fdb show [sudo] password for david: 01:00:5e:00:00:01 dev eth0 self permanent 33:33:00:00:00:01 dev eth0 self permanent 33:33:ff:d0:e8:7e dev eth0 self permanent 01:00:5e:00:00:fb dev eth0 self permanent 33:33:00:00:00:fb dev eth0 self permanen Neighbor Table When an IP node wants to communicate with a system in the same layer 2 domain, it looks in its neighbor table, or ARP table, to determine how to construct the Ethernet frame. If the desired destination IP address is not in the neighbor table, the node issues an ARP request, which is broadcast to everyone in the layer 2 domain, that asks, ‚ÄúPlease tell me the MAC address for the node with IP address X.X.X.X.‚Äù Assuming the target device is available, the node with that IP address will respond. In Linux, you view (and manipulate) the Neighbor table using the ip neighbor show\n‚ùØ ip neigh show 172.20.10.2 dev eth0 lladdr ac:bc:32:9c:a6:3b REACHABLE 172.20.10.1 dev eth0 lladdr 72:70:0d:4c:6b:64 STALE IP Routing You can view the routing table with:\n‚ùØ ip route show default via 172.20.10.1 dev eth0 proto static metric 1024 172.20.10.0/28 dev eth0 proto kernel scope link src 172.20.10.10 Create a static route to router 192.168.1.1 through the eth1 interfaces, we would use the ip route command:\n‚ùØ ip route add default via 192.168.1.1 dev eth1 Virtual LANs (VLANs) Configures VLANs on a Linux system by setting up a bridge (br0) with VLAN filtering and adding interfaces to manage tagged and untagged traffic. The 8021q module is loaded to enable VLAN tagging, and the bridge br0 is created to handle VLAN assignments. eth1 is assigned to VLAN 11 and eth3 to VLAN 12, both set to handle untagged traffic. eth2 is made a member of both VLANs (11 and 12), allowing it to route tagged frames across them. Finally, all interfaces are activated, enabling VLAN-based traffic segmentation across the specified Ethernet ports.\n‚ùØ sudo modprobe 8021q ‚ùØ sudo ip link add br0 type bridge vlan_filtering 1 ‚ùØ sudo ip link set eth1 master br0 ‚ùØ sudo ip link set eth2 master br0 ‚ùØ sudo ip link set eth3 master br0 ‚ùØ sudo bridge vlan add dev eth1 vid 11 pvid untagged ‚ùØ sudo bridge vlan add dev eth3 vid 12 pvid untagged ‚ùØ sudo bridge vlan add dev eth2 vid 11 ‚ùØ sudo bridge vlan add dev eth2 vid 12 ‚ùØ sudo ip link set up dev br0 ‚ùØ sudo ip link set up dev eth1 ‚ùØ sudo ip link set up dev eth2 ‚ùØ sudo ip link set up dev eth3 Check the status of the bridge links\n‚ùØ bridge link show Check the status of the VLANs tranversing the bridge\n‚ùØ bridge vlan show View the forwarding database\n‚ùØ bridge fdb show This setup connects two Linux systems over a VXLAN (Virtual Extensible LAN) tunnel, creating a virtual Layer 2 network between them. On each system, a bridge (br0) is created with VLAN filtering, and a VLAN interface (vlan10) is added with an IP in the 10.0.0.x/24 subnet. A VXLAN Tunnel Endpoint (VTEP) interface (vtep10) is configured on each host, specifying the VXLAN ID (1010) and local and remote IP addresses, allowing encapsulated traffic to traverse between hosts transparently. The interface eth1 is added to the bridge, set to VLAN 10 with untagged traffic, enabling the two Linux systems to communicate as if on the same local network.\nLinux System 1\n‚ùØ sudo ip link add br0 type bridge vlan_filtering 1 ‚ùØ sudo ip link add vlan10 type vlan id 10 link bridge protocol none ‚ùØ sudo ip addr add 10.0.0.1/24 dev vlan10 ‚ùØ sudo ip link add vtep10 type vxlan id 1010 local 10.1.0.1 remote 10.3.0.1 learning ‚ùØ sudo ip link set eth1 master br0 ‚ùØ sudo bridge vlan add dev eth1 vid 10 pvid untagged Linux System 1\n‚ùØ ‚ùØ sudo ip link add br0 type bridge vlan_filtering 1 ‚ùØ sudo ip link add vlan10 type vlan id 10 link bridge protocol none ‚ùØ sudo ip addr add 10.0.0.2/24 dev vlan10 ‚ùØ sudo ip link add vtep10 type vxlan id 1010 local 10.3.0.1 remote 10.1.0.1 learning ‚ùØ sudo ip link set eth1 master br0 ‚ùØ sudo bridge vlan add dev eth1 vid 10 pvid untagged Chapter 5 Instead of trying to administer a Linux-powered network with hundreds of command and configuration files, Cumulus Linux includes a command line utility as part of the NCLU package that is invoked by the net command to provide a consistent and helpful user interface.\n‚ùØ net help . # # COMMANDS are listed below and have context specific arguments which can # be explored by typing \u0026#34;\u0026lt;TAB\u0026gt;\u0026#34; or \u0026#34;help\u0026#34; anytime while using net. # # Use \u0026#39;man net\u0026#39; for a more comprehensive overview. net abort net commit [verbose] [confirm] [description \u0026lt;wildcard\u0026gt;] net commit delete (\u0026lt;number\u0026gt;|\u0026lt;number-range\u0026gt;) net commit permanent \u0026lt;wildcard\u0026gt; net del all net help [verbose] net pending [json] net rollback (\u0026lt;number\u0026gt;|last) net rollback description \u0026lt;wildcard-snapshot\u0026gt; net show commit (history|\u0026lt;number\u0026gt;|\u0026lt;number\u0002range\u0026gt;|last) net show rollback (\u0026lt;number\u0026gt;|last) net show rollback description \u0026lt;wildcard-snapshot\u0026gt; net show configuration Building better bridge One of the most basic networking use cases is a single transparent bridge. In our example, we‚Äôll put the interfaces named swp1, swp2, and swp3 into a transparent bridge with swp3 connecting back into our layer 2 bridge infrastructure.\n‚ùØ net add bridge bridge ports swp1,swp2,swp3 ‚ùØ net commit Two Links Are better than one This command sequence configures a Multi-Chassis Link Aggregation (MLAG) setup to ensure redundancy and high availability for server connections in a network. In this setup, two switches work together to appear as a single logical unit to connected servers, enabling redundancy at both link and switch levels. The command net add clag peer sys-mac designates a shared MAC address for MLAG communication, while swp5 and swp6 are configured as peer links, which are essential for the two switches to sync state information. VLANs 100-199 are added to trunk traffic between the switches and servers. The command net add clag port bond is used to create bonded connections to core network switches (bond-to-spines) and to servers (host-01 and host-02), with unique clag-id identifiers for each connection. Finally, net commit applies these configurations, ensuring resilient connectivity and load balancing across the network paths.\n‚ùØ ‚ùØ net add clag peer sys-mac 44:38:39:FF:00:01 interface swp5,swp6 primary ‚ùØ net add vlan 100-199 ‚ùØ net add clag port bond bond-to-spines interface swp3-4 clag-id 500 ‚ùØ net add clag port bond host-01 interface swp1 clag-id 1 ‚ùØ net add clag port bond host-02 interface swp1 clag-id 2 ‚ùØ net commit In this configuration, an IP fabric is created using a leaf-spine topology, ideal for modern data centers to handle high-speed, low-latency, layer 3 (IP routed) traffic flows. The leaf switch is set up to use BGP unnumbered on interfaces connected to spine switches (swp5-8), enabling automatic address assignments and streamlined connectivity without assigning specific IP addresses on each link. BGP advertisements are used to propagate reachability for the leaf‚Äôs IP subnets (10.0.0.0/24 and 10.1.0.1/32) across the network, ensuring efficient routing. Commands initialize BGP for Autonomous System (AS) 65001, add a loopback IP (for device identification), assign VLAN 1 with an IP address, and configure a bridge over ports swp1-4 for local connectivity. Finally, net commit applies these settings, creating a scalable, robust IP fabric with simplified configuration across the network infrastructure.\n‚ùØ net add bgp autonomous-system 65001 ‚ùØ net add loopback lo ip address 10.1.0.1/32 ‚ùØ net add bgp ipv4 unicast network 10.1.0.1/32 ‚ùØ net add vlan 1 ip address 10.0.0.1/24 ‚ùØ net add bgp ipv4 unicast network 10.0.0.1/24 ‚ùØ net add bgp neighbor swp5-8 interface remote-as external ‚ùØ net add bgp ipv4 unicast neighbor swp5-8 activate ‚ùØ net add bridge bridge ports swp1-4 ‚ùØ net commit In this setup, BGP EVPN (Ethernet Virtual Private Network) enables layer 2 peering across a layer 3 IP fabric, ideal for applications that need layer 2 connectivity, like VMware\u0026rsquo;s vMotion, within a highly scalable layer 3 network. Here, BGP EVPN advertises learned MAC addresses across the network, allowing each leaf switch to forward layer 2 traffic directly to the appropriate VTEP (Virtual Tunnel Endpoint) without relying on traditional flooding methods or spanning tree protocols. The configuration assigns Autonomous System (AS) 65001, sets up loopback and VLAN IP addresses, and establishes a tagged VLAN (VLAN 100) with a VTEP for layer 2 connectivity. Commands enable VLAN 100 across interfaces swp1-4 and configure BGP unnumbered on spine connections (swp5-8), facilitating routing and advertising reachability. With these settings, BGP EVPN broadcasts VLAN 100\u0026rsquo;s availability across the network, ensuring seamless layer 2 and layer 3 integration within the IP fabric.\n‚ùØ net add bgp autonomous-system 65001 ‚ùØ net add loopback lo ip address 10.1.0.1/32 ‚ùØ net add bgp ipv4 unicast network 10.1.0.1/32 ‚ùØ net add vlan 1 ip address 10.0.0.1/24 ‚ùØ net add bgp ipv4 unicast network 10.0.0.1/24 ‚ùØ net add interface swp1-4 bridge trunk vlans 100 Cumulus Linux 93 ‚ùØ net add vxlan vtep100 vxlan id 100 ‚ùØ net add vxlan vtep100 vxlan local-tunnelip 10.1.0.1 ‚ùØ net add vxlan vtep100 bridge access 100 ‚ùØ net add vxlan vtep100 bridge learning off ‚ùØ net add vxlan vtep100 mtu 9216 ‚ùØ net add bgp neighbor swp5-8 interface remote-as external ‚ùØ net add interface swp5-8 mtu 9216 ‚ùØ net add bgp neighbor swp5-8 interface remote-as external ‚ùØ net add bgp ipv4 unicast neighbor swp5-8 activate ‚ùØ net add bgp evpn neighbor swp5-8 activate ‚ùØ net add bgp evpn advertise-all-vni ‚ùØ net commit In chapters 1 through 5 of the Cumulus Networks book, the foundation for modern network architecture and best practices in data center networking is thoroughly established. The book begins with essential networking concepts and progressively introduces key topics such as layer 2 and layer 3 design principles, VLANs, MLAG (Multi-Chassis Link Aggregation) for redundancy, and the growing preference for IP-based fabrics over traditional broadcast domains. It then explores advanced network virtualization techniques with BGP EVPN, showing how BGP can facilitate both IP routing and layer 2 overlays, providing scalable and efficient connectivity. The focus on high-performance, resilient, and scalable networks‚Äîespecially suited for data centers‚Äîunderscores the shift towards simplified management and automation in networking. By the end of these chapters, readers are equipped with the core principles and practical configurations needed to design robust, flexible networks that can adapt to dynamic data center demands, from minimizing latency in leaf-spine architectures to using VXLAN and BGP for network virtualization.\n","permalink":"https://erickdjm.xyz/posts/linux_networking/","summary":"place your summary here","title":"Linux_networking"},{"content":"DevJourney As a child, I loved legos, even though I had only 1 lego in my life. But the feeling of creating some structure, a character, scenarios, tools, etc. Makes me feel joyful. Since then I have always wanted to become an inventor. When I discovered the career of an inventor, did not exist I choose (a bit disappointed) to code because robots are expensive and programming is cheap and enables you to do whatever you want. Then I submit my application for a Computer Science Engineering bachelor at Benemerita Universidad Autonoma de Puebla. There I enrolled in a program sponsored by Microsoft called \u0026ldquo;Innovaccion virtual\u0026rdquo; which consists of being evangelized with cloud technologies. Later on, in a future edition called \u0026ldquo;Launch X\u0026rdquo; (Fullstack development) Carlo Gilmar taught us backend, CLI, VCS, OS, text editors, Source Code Hosting Platforms, Software Design, TDD, HTTP and web, CI/CD, linters.\nHowever, I met Jose R. Zu√±iga (@neodevelop) and with the help of MakingDevs, I reinforced and enhanced the skills I\u0026rsquo;ve acquired before such as.\nGroovy Course Clousures Groovy Scripting Grape Test Gradle Internet vs web what is a net TCP/IP model OSI model Protocols TCP UDP SSH HTTP Sockets Ports What is a computer What is an Operating System Shell Unix vs Linux vs Windows What is a programming language Kinds of programming languages Static vs dynamic Creaci√≥n de blog Hugo Git y GitHub Git introductory Remotes GitHub pages GitHub actions Git Submodules Protocols ssh scp http What is a version manager asdf Advent of Code Exercises Unit Testing and TDD What is a framework Ruby Programming ruby book Getting started Ruby_on_rails Migrate a blog from octopress to hugo using gh-pages Git Pro git extensions (delta, caleidoscope) GUI git tower, kraken Git internals Hooks aliases and shortcuts rebase \u0026ndash;interactive workflows bisect Plumb and porcelain commands Spring course (just as a viewer) HTML-rfc Java servlets vs Groovlets Design Notes Rspec Don\u0026rsquo;t trust a test you haven\u0026rsquo;t seen fail Tiny significative changes (babystepts, commit everything) Exercises in counterpoint: initial design vs final design Tools for development Project Generator Task manager Packager Dependency Manager Transitive dependencies Development platform Specificacion HTML Abstractions Rackup TomCat Jetty Puma Netty Unicorn CodeBreaker (project) ruby logic with TDD Web framework (Sinatra) Haml vs erb UI test cucumber (BDD) Cloud Route S3 DNS Type of registers MX (mainling) TXT A CNAME EC2 Ideally, an app should not need to be restarted Networks LAN WAN SAN MAN VPN IP clases A, B, C net address subnet mask hosts subnets Gateway Broadcast DHCP Nginx Redirect(port :80 ==\u0026gt; :443) block access by ip, only by DNS Certificate Let\u0026rsquo;s Encrypt (SSL, TLS) CI/CD QA, Stage, Production Capistrano ssh (no interactive shell) deployment Github CICD AWS EC2 APP RUNNER GCP Cloud build Cloud run ","permalink":"https://erickdjm.xyz/posts/devjourney/","summary":"place your summary here","title":"DevJourney"},{"content":"RubyOnRails M√≥dulos esenciales en RoR Active Record Provee una estructura para poder hacer la interconexi√≥n con la DB a trav√©s del Modelo. Desde el modelo se har√°n las consultas a la base de datos.\nLayouts and Rendering Para mostrar la vista utilizaremos este m√≥dulo. Renderizando estructuras de p√°ginas web.\nActionView Utilizar ciertos componentes o m√©todos, para agilizar la inserci√≥n de componentes gr√°ficos (helpers).\nActionController y RailsRouting Estructurar las peticiones de clientes al servidor\nActionMailer Cuando intentemos enviar emails utilizaremos este m√≥dulo\nThe Assets Pipeline Hojas de estilo CSS, p√°ginas HTML, javascript.\nInstalaci√≥n Ruby RubyOnRails framework ","permalink":"https://erickdjm.xyz/posts/rubyonrails/","summary":"place your summary here","title":"RubyOnRails"},{"content":"Terminal, Command Line, Console, Shell Cuando empec√© a escuchar t√©rminos como linea de comandos, command line interpreter (CLI), shell (zsh, bash, fish), terminal, emulador de terminal, consola, prompt. Pens√© que algunas significaban lo mismo, y otras no sab√≠a que eran. Me result√≥ confuso distinguir entre cada una de ellas. Aqu√≠ te explicar√© qu√© significan.\nTerminal Una terminal (en su expresi√≥n m√°s b√°sica) es un dispositivo f√≠sico de input y output. Ahora se utiliza como sin√≥nimo de emulador de terminal.\nTerminal Emulator Linea de comandos La linea de comandos o command line interpreter, en t√©rminos simples es un tipo de interfaz que acepta como input comandos para luego ejecutarlos.\nPrompt Es el caracter que se encuentra en la linea de comandos, para indicar que est√° a la espera de un comando.\nConsole Shell La shell (cubierta/c√°scara en espa√±ol) es una linea de comandos. Una implementaci√≥n concreta de una l√≠nea de comandos. Existen muchas shells, cada una con sus diferentes caracter√≠sticas. Las hay para cada OS, windows (cmd, poweshell, gitBash), Linux y Unix (Bash, Zsh, Fish).\nSub Otra cosa ","permalink":"https://erickdjm.xyz/posts/command-line/","summary":"Herramienta fundamental de un buen developer","title":"Command Line Interpreter"},{"content":"Qu√© es git ü§î Git es un sistema de control de versiones distribuido de c√≥digo abierto dise√±ado para manejar de forma eficiente desde peque√±os a grandes projectos con velocidad y eficiencia.\nPor qu√© necesito git Si alguna vez has:\ncreado algo guardado editado vuelto a guardar Entonces muy probablemente te has encontrado con la necesidad de tener varias versiones de un archivo ( o varios archivos), por si algo sale mal, por si todo sale mal o por si quieres hacer cambios experimentales. Necesitas tener la seguridad de que existe una copia \u0026ldquo;buena\u0026rdquo;, la copia \u0026ldquo;base\u0026rdquo;, la copia \u0026ldquo;buenaBuena\u0026rdquo;, la \u0026ldquo;Buena30000AhoraSi\u0026rdquo;, etc.. Y al final terminar√°s con archivos esparcidos por tus carpetas pero con algunos cambios. No sabr√°s cu√°l es el √∫ltimo, ni hablar de el orden de todos ellos.\nAqui es donde entra Git, es un asistente, con una excelente memoria. Git te permite mantener una copia de tus archivos, de hecho de los cambios en tus archivos. Controlas a tus archivos, no ellos a ti üí™üèΩ.\nQu√© hace git üå† Con git puedes:\nguardar tus proyectos mantener un registro detallado de los cambios en tus archivos colocar mensajes y etiquetas en cada versi√≥n crear lineas alternas de trabajo (realizar tus experimentos, sin da√±ar tus otras versiones) colaborar de forma asincrona en la edici√≥n de un archivo viajar en el tiempo (revisa tus versiones previas) identificar las diferencias de una versi√≥n a otra detectar herrores en tus proyectos (qui√©n, c√≥mo, cu√°ndo y d√≥nde se gener√≥) C√≥mo trabajar con git (b√°sico) Inicialmente, tendremos que elegir directorio destinado para nuestro proyecto, donde se alojar√° nuestro repositorio. Una vez elegido, dentro de la terminal ejecutaremos uno de estos 3 comandos:\n#iniciar un repositorio dentro de la carpeta actual user@pc$ git init #iniciar un repositorio dentro de la carpeta dir_repo user@pc$ git init dir_repo #clonar un repositorio dentro user@pc$ git clone ssh_dir Tendremos que identificarnos, proporcionar informaci√≥n de contacto (correo electr√≥nico y nombre de usuario).\nuser@pc$ git config --global user.name \u0026#34;tu_nombre\u0026#34; user@pc$ git config --global user.email \u0026#34;tu_usuario@tu_dominio.com\u0026#34; Luego podremos ejeccutar el siguiente comando:\nuser@pc$ git status Y si el directorio ya ten√≠a archivos o agregamos nuevos (agregar√© el archivo hello.rb), arrojar√° informaci√≥n de nuestro repositorio.\nuser@pc$ git status On branch master No commits yet Untracked files: (use \u0026#34;git add \u0026lt;file\u0026gt;...\u0026#34; to include in what will be committed) hello.rb nothing added to commit but untracked files present (use \u0026#34;git add\u0026#34; to track) La primera l√≠nea nos indica que estamos en la rama master (m√°s adelante hablaremos de las ramas). Por el momento piensa en ella como la versi√≥n principal de tu proyecto. Observamos la leyenda No commits yet. Refiri√©ndose a que no hemos guardado al menos una versi√≥n de nuestro proyecto haciendo un commit. Untracked files nos indica que no hemos versionado este archivo en particular. nothing added to commit but untracked file present... nos muestra qu√© ha sido movido al √°rea de Staging (una √°rea de ayuda para marcar los cambios a guardar) Para guardar nuestros cambios en el repositorio nos apoyaremos de los siguientes 3 comandos comandos (principalmente).\nuser@pc$ git add hello.rb user@pc$ git status On branch master No commits yet Changes to be committed: (use \u0026#34;git rm --cached \u0026lt;file\u0026gt;...\u0026#34; to unstage) new file: hello.rb user@pc$ git commit -m \u0026#34;agregar hello.rb script de ruby git add \u0026lt;file\u0026gt; coloca los cambios en el √°rea de staging. Lo comprobamos con git status (que est√©n en staging no significa que hayan sido guardados). git commit -m \u0026quot;\u0026lt;messgae\u0026gt;\u0026quot; no permite guardar el cambio en nuesto archivo de forma permanente, adjuntado un mensaje concreto de nuesto cambio.\nAhora si queremos consultar el historial de nuesto repositorio (proyecto). Empleamos el comando log:\nPara saber qu√© ha cambiado en nuestro proyecto (directorio). Notaremos\nEn git, tus archivos pueden encontrarse en 4 estados (principalmente). Siendo untracked, modified, staged y commited. Si tu archivo es nuevo, se encontrar√° untracked. Cuando lo agregamos\nEn el working directory, Staging, local repository, remote repository.\nEn un inicio, todos los nuevos archivos se van a encontrar\nEstados en git Area de trabajo Area de Staging Area de repositorio local C√≥mo paso de un estado a otro?\nComandos b√°sicos Lista de comandos b√°sicos de git\nConceptos avanzados Concepto de Branching\nBranching Repo remoto Documentaci√≥n Git tiene una gran p√°gina de documentaci√≥n. Donde explican todo lo relativo a su sistema, sus comandos, las banderas de sus comandos, etc. Cons√∫ltala aqu√≠.\n","permalink":"https://erickdjm.xyz/posts/git/","summary":"Aprende qu√© es git. El sistema de control de versiones m√°s famoso. Controla tus proyectos y colabora con tus amigos de forma asincrona no lineal! Herramienta vital para el desarrollo de software","title":"Gu√≠a de Git"},{"content":"Encabezados As√≠ como en html tenemos etiquetas para los headers desde \u0026lt;h1\u0026gt; \u0026mdash; \u0026lt;h2\u0026gt;. En MarkDown utilizamos # Titulo para representar un header de nivel \u0026lt;h1\u0026gt;. ## Subtitulo \u0026lt;h2\u0026gt; , ### Subtitulo \u0026lt;h3\u0026gt;. As√≠ sucesivamente.\n# Titulo H1 Titulo H1 # Titulo H1 Subtitulo H2 ### Subtitulo H3 Subtitulo H3 #### Subtitulo H4 Subtitulo H4 ##### Subtitulo H5 Subtitulo H5 ###### Subtitulo H6 Subtitulo H6 P√°rrafos Para escribir un p√°rrafo escribe de forma normal texto. De forma cont√≠nua, ya que MarkDown se encargar√° de formatear tu texto, dando los saltos de l√≠nea necesarios. Si quieres escribir en otro p√°rrafo deber√°s de dejar una l√≠nea vac√≠a, entre p√°rrafo y p√°rrafo. Ejemplo:\nLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Enim neque volutpat ac tincidunt vitae semper quis lectus nulla. Viverra vitae congue eu consequat ac felis donec et odio. Otro p√°rrafo. Dui id ornare arcu odio ut sem nulla pharetra diam. Augue lacus viverra vitae congue eu consequat ac felis donec. Lorem ipsum dolor sit amet consectetur adipiscing. Dapibus ultrices in iaculis nunc sed augue. Molestie at elementum eu facilisis sed odio morbi. Formatear texto Negritas Puedes formatear una palabra para que se vea en negritas encerrando a la palabra entre dos asteriscos. Ejemplo:\nE pour si **move** E pour si move\nIt√°licas Similar a las negritas, a√±ade un asterisco antes y despu√©s de la palabra. Ejemplo:\nWhat does the *fox* say? What does the fox say?\nIt√°licas Negritas Si quieres combinarlas, simplemente rodea a la palabra con 3 asteriscos. Ejemplo:\nAime-moi dans la ***neige***. Aime-moi dans la neige.\nBloques de Citas Para crear una cita en bloque, agrega \u0026gt; al inicio de un p√°rrafo. Ejemplo:\n\u0026gt; We creep up on extinction We creep up on extinction\nMultiples P√°rrafos Agrega un \u0026lsquo;\u0026gt;\u0026rsquo; entre cada l√≠nea vac√≠a, y a cada p√°rrafo que quieras citar. Ejemplo:\n\u0026gt; You put your finest suit on, I paint my fingernails \u0026gt; \u0026gt; Oh, we\u0026#39;re going out in style. And everything\u0026#39;s on sale You put your finest suit on, I paint my fingernails\nOh, we\u0026rsquo;re going out in style. And everything\u0026rsquo;s on sale\nCombinar Elementos Combina elementos dentro de una cita. Ejemplo:\n\u0026gt; ## Patata \u0026gt; - Nace \u0026gt; - *Crece* \u0026gt; - Se pudre \u0026gt; - Es venenosa \u0026gt; - Pierdes Patata Nace Crece Se pudre Es venenosa Listas Listas ordenadas Agrega un elemento por l√≠nea, empezando por el n√∫mero \u0026lsquo;1\u0026rsquo;. Ejemplo:\n1. Comida 1. Burritos 2. Tacos 2. Agua 3. Aire Equivalente a:\n1. comida 1. Burritos 1. Tacos 1. agua 1. aire 1. comida 1. Burritos 9. Tacos 7. agua 19. aire Comida Burritos Tacos Agua Aire Listas No Ordenadas Cuando no importa el orden declaramos elementos de nuestra lista con \u0026lsquo;-\u0026rsquo;, \u0026lsquo;*\u0026rsquo; √≥ \u0026lsquo;+\u0026rsquo;. Ejemplo:\n- Comida - Burritos - Tacos - Agua - Aire Equivalente a:\n* Comida * Burritos * Tacos * Agua * Aire + Comida + Burritos + Tacos + Agua + Aire Comida Burritos Tacos Agua Aire ","permalink":"https://erickdjm.xyz/posts/markdown/","summary":"Descrubre los comandos b√°sicos del lenguaje de marcado MarkDown, simple pero poderoso.","title":"Gu√≠a de MarkDown"}]