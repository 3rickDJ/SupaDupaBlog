[{"content":"Qu√© es git ü§î Git es un sistema de control de versiones distribuido de c√≥digo abierto dise√±ado para manejar de forma eficiente desde peque√±os a grandes projectos con velocidad y eficiencia.\nPor qu√© necesito git Si alguna vez has:\ncreado algo guardado editado vuelto a guardar Entonces muy probablemente te has encontrado con la necesidad de tener varias versiones de un archivo ( o varios archivos), por si algo sale mal, por si todo sale mal o por si quieres hacer cambios experimentales. Necesitas tener la seguridad de que existe una copia \u0026ldquo;buena\u0026rdquo;, la copia \u0026ldquo;base\u0026rdquo;, la copia \u0026ldquo;buenaBuena\u0026rdquo;, la \u0026ldquo;Buena30000AhoraSi\u0026rdquo;, etc.. Y al final terminar√°s con archivos esparcidos por tus carpetas pero con algunos cambios. No sabr√°s cu√°l es el √∫ltimo, ni hablar de el orden de todos ellos.\nAqui es donde entra Git, es un asistente, con una excelente memoria. Git te permite mantener una copia de tus archivos, de hecho de los cambios en tus archivos. Controlas a tus archivos, no ellos a ti üí™üèΩ.\nQu√© hace git üå† Con git puedes:\nguardar tus proyectos mantener un registro detallado de los cambios en tus archivos colocar mensajes y etiquetas en cada versi√≥n crear lineas alternas de trabajo (realizar tus experimentos, sin da√±ar tus otras versiones) colaborar de forma asincrona en la edici√≥n de un archivo viajar en el tiempo (revisa tus versiones previas) identificar las diferencias de una versi√≥n a otra detectar herrores en tus proyectos (qui√©n, c√≥mo, cu√°ndo y d√≥nde se gener√≥) C√≥mo trabajar con git (b√°sico) Inicialmente, tendremos que elegir directorio destinado para nuestro proyecto, donde se alojar√° nuestro repositorio. Una vez elegido, dentro de la terminal ejecutaremos uno de estos 3 comandos:\n#iniciar un repositorio dentro de la carpeta actual user@pc$ git init #iniciar un repositorio dentro de la carpeta dir_repo user@pc$ git init dir_repo #clonar un repositorio dentro user@pc$ git clone ssh_dir Tendremos que identificarnos, proporcionar informaci√≥n de contacto (correo electr√≥nico y nombre de usuario).\nuser@pc$ git config --global user.name \u0026#34;tu_nombre\u0026#34; user@pc$ git config --global user.email \u0026#34;tu_usuario@tu_dominio.com\u0026#34; Luego podremos ejeccutar el siguiente comando:\nuser@pc$ git status Y si el directorio ya ten√≠a archivos o agregamos nuevos (agregar√© el archivo hello.rb), arrojar√° informaci√≥n de nuestro repositorio.\nuser@pc$ git status On branch master No commits yet Untracked files: (use \u0026#34;git add \u0026lt;file\u0026gt;...\u0026#34; to include in what will be committed) hello.rb nothing added to commit but untracked files present (use \u0026#34;git add\u0026#34; to track) La primera l√≠nea nos indica que estamos en la rama master (m√°s adelante hablaremos de las ramas). Por el momento piensa en ella como la versi√≥n principal de tu proyecto. Observamos la leyenda No commits yet. Refiri√©ndose a que no hemos guardado al menos una versi√≥n de nuestro proyecto haciendo un commit. Untracked files nos indica que no hemos versionado este archivo en particular. nothing added to commit but untracked file present... nos muestra qu√© ha sido movido al √°rea de Staging (una √°rea de ayuda para marcar los cambios a guardar) Para guardar nuestros cambios en el repositorio nos apoyaremos de los siguientes 3 comandos comandos (principalmente).\nuser@pc$ git add hello.rb user@pc$ git status On branch master No commits yet Changes to be committed: (use \u0026#34;git rm --cached \u0026lt;file\u0026gt;...\u0026#34; to unstage) new file: hello.rb user@pc$ git commit -m \u0026#34;agregar hello.rb script de ruby git add \u0026lt;file\u0026gt; coloca los cambios en el √°rea de staging. Lo comprobamos con git status (que est√©n en staging no significa que hayan sido guardados). git commit -m \u0026quot;\u0026lt;messgae\u0026gt;\u0026quot; no permite guardar el cambio en nuesto archivo de forma permanente, adjuntado un mensaje concreto de nuesto cambio.\nAhora si queremos consultar el historial de nuesto repositorio (proyecto). Empleamos el comando log:\nPara saber qu√© ha cambiado en nuestro proyecto (directorio). Notaremos\nEn git, tus archivos pueden encontrarse en 4 estados (principalmente). Siendo untracked, modified, staged y commited. Si tu archivo es nuevo, se encontrar√° untracked. Cuando lo agregamos\nEn el working directory, Staging, local repository, remote repository.\nEn un inicio, todos los nuevos archivos se van a encontrar\nEstados en git Area de trabajo Area de Staging Area de repositorio local C√≥mo paso de un estado a otro?\nComandos b√°sicos Lista de comandos b√°sicos de git\nConceptos avanzados Concepto de Branching\nBranching Repo remoto Documentaci√≥n Git tiene una gran p√°gina de documentaci√≥n. Donde explican todo lo relativo a su sistema, sus comandos, las banderas de sus comandos, etc. Cons√∫ltala aqu√≠.\n","permalink":"https://3rickdj.github.io/SupaDupaBlog/posts/git/","summary":"Aprende qu√© es git. El sistema de control de versiones m√°s famoso. Controla tus proyectos y colabora con tus amigos de forma asincrona no lineal! Herramienta vital para el desarrollo de software","title":"Gu√≠a de Git"},{"content":"Encabezados As√≠ como en html tenemos etiquetas para los headers desde \u0026lt;h1\u0026gt; \u0026mdash; \u0026lt;h2\u0026gt;. En MarkDown utilizamos # Titulo para representar un header de nivel \u0026lt;h1\u0026gt;. ## Subtitulo \u0026lt;h2\u0026gt; , ### Subtitulo \u0026lt;h3\u0026gt;. As√≠ sucesivamente.\n# Titulo H1 Titulo H1 # Titulo H1 Subtitulo H2 ### Subtitulo H3 Subtitulo H3 #### Subtitulo H4 Subtitulo H4 ##### Subtitulo H5 Subtitulo H5 ###### Subtitulo H6 Subtitulo H6 P√°rrafos Para escribir un p√°rrafo escribe de forma normal texto. De forma cont√≠nua, ya que MarkDown se encargar√° de formatear tu texto, dando los saltos de l√≠nea necesarios. Si quieres escribir en otro p√°rrafo deber√°s de dejar una l√≠nea vac√≠a, entre p√°rrafo y p√°rrafo. Ejemplo:\nLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Enim neque volutpat ac tincidunt vitae semper quis lectus nulla. Viverra vitae congue eu consequat ac felis donec et odio. Otro p√°rrafo. Dui id ornare arcu odio ut sem nulla pharetra diam. Augue lacus viverra vitae congue eu consequat ac felis donec. Lorem ipsum dolor sit amet consectetur adipiscing. Dapibus ultrices in iaculis nunc sed augue. Molestie at elementum eu facilisis sed odio morbi. Formatear texto Negritas Puedes formatear una palabra para que se vea en negritas encerrando a la palabra entre dos asteriscos. Ejemplo:\nE pour si **move** E pour si move\nIt√°licas Similar a las negritas, a√±ade un asterisco antes y despu√©s de la palabra. Ejemplo:\nWhat does the *fox* say? What does the fox say?\nIt√°licas Negritas Si quieres combinarlas, simplemente rodea a la palabra con 3 asteriscos. Ejemplo:\nAime-moi dans la ***neige***. Aime-moi dans la neige.\nBloques de Citas Para crear una cita en bloque, agrega \u0026gt; al inicio de un p√°rrafo. Ejemplo:\n\u0026gt; We creep up on extinction We creep up on extinction\nMultiples P√°rrafos Agrega un \u0026lsquo;\u0026gt;\u0026rsquo; entre cada l√≠nea vac√≠a, y a cada p√°rrafo que quieras citar. Ejemplo:\n\u0026gt; You put your finest suit on, I paint my fingernails \u0026gt; \u0026gt; Oh, we\u0026#39;re going out in style. And everything\u0026#39;s on sale You put your finest suit on, I paint my fingernails\nOh, we\u0026rsquo;re going out in style. And everything\u0026rsquo;s on sale\nCombinar Elementos Combina elementos dentro de una cita. Ejemplo:\n\u0026gt; ## Patata \u0026gt; - Nace \u0026gt; - *Crece* \u0026gt; - Se pudre \u0026gt; - Es venenosa \u0026gt; - Pierdes Patata Nace Crece Se pudre Es venenosa Listas Listas ordenadas Agrega un elemento por l√≠nea, empezando por el n√∫mero \u0026lsquo;1\u0026rsquo;. Ejemplo:\n1. Comida 1. Burritos 2. Tacos 2. Agua 3. Aire Equivalente a:\n1. comida 1. Burritos 1. Tacos 1. agua 1. aire 1. comida 1. Burritos 9. Tacos 7. agua 19. aire Comida Burritos Tacos Agua Aire Listas No Ordenadas Cuando no importa el orden declaramos elementos de nuestra lista con \u0026lsquo;-\u0026rsquo;, \u0026lsquo;*\u0026rsquo; √≥ \u0026lsquo;+\u0026rsquo;. Ejemplo:\n- Comida - Burritos - Tacos - Agua - Aire Equivalente a:\n* Comida * Burritos * Tacos * Agua * Aire + Comida + Burritos + Tacos + Agua + Aire Comida Burritos Tacos Agua Aire ","permalink":"https://3rickdj.github.io/SupaDupaBlog/posts/markdown/","summary":"Descrubre los comandos b√°sicos del lenguaje de marcado MarkDown, simple pero poderoso.","title":"Gu√≠a de MarkDown"},{"content":"Terminal, Command Line, Console, Shell Cuando empec√© a escuchar t√©rminos como linea de comandos, command line interpreter (CLI), shell (zsh, bash, fish), terminal, emulador de terminal, consola, prompt. Pens√© que algunas significaban lo mismo, y otras no sab√≠a que eran. Me result√≥ confuso distinguir entre cada una de ellas. Aqu√≠ te explicar√© qu√© significan.\nTerminal Una terminal (en su expresi√≥n m√°s b√°sica) es un dispositivo f√≠sico de input y output. Ahora se utiliza como sin√≥nimo de emulador de terminal.\nTerminal Emulator Linea de comandos La linea de comandos o command line interpreter, en t√©rminos simples es un tipo de interfaz que acepta como input comandos para luego ejecutarlos.\nPrompt Es el caracter que se encuentra en la linea de comandos, para indicar que est√° a la espera de un comando.\nConsola Shell La shell (cubierta/c√°scara en espa√±ol) es una linea de comandos. Una implementaci√≥n concreta de una l√≠nea de comandos. Existen muchas shells, cada una con sus diferentes caracter√≠sticas. Las hay para cada OS, windows (cmd, poweshell, gitBash), Linux y Unix (Bash, Zsh, Fish).\nSub Otra cosa ","permalink":"https://3rickdj.github.io/SupaDupaBlog/posts/command-line/","summary":"Herramienta fundamental de un buen developer","title":"Command Line Interpreter"},{"content":"RubyOnRails M√≥dulos esenciales en RoR Active Record Provee una estructura para poder hacer la interconexi√≥n con la DB a trav√©s del Modelo. Desde el modelo se har√°n las consultas a la base de datos.\nLayouts and Rendering Para mostrar la vista utilizaremos este m√≥dulo. Renderizando estructuras de p√°ginas web.\nActionView Utilizar ciertos componentes o m√©todos, para agilizar la inserci√≥n de componentes gr√°ficos (helpers).\nActionController y RailsRouting Estructurar las peticiones de clientes al servidor\nActionMailer Cuando intentemos enviar emails utilizaremos este m√≥dulo\nThe Assets Pipeline Hojas de estilo CSS, p√°ginas HTML, javascript.\nInstalaci√≥n Ruby RubyOnRails framework ","permalink":"https://3rickdj.github.io/SupaDupaBlog/posts/rubyonrails/","summary":"place your summary here","title":"RubyOnRails"}]